{"version":3,"file":"TableCell.js","sourceRoot":"","sources":["../src/TableCell.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gDAA2D;AAC3D,iCAAqE;AA8DrE;IAA+B,6BAAmC;IAAlE;;IA0CA,CAAC;IAzCG,0BAAM,GAAN;;QACI,IAAI,OAAY,CAAC;QAEjB,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;YACzC,OAAO,GAAG,CACN,oBAAC,eAAI,QAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAQ,CACrC,CAAC;SACL;aAAM,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAChD,OAAO,GAAG,CACN,oBAAC,eAAI,QAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAQ,CAChD,CAAC;SACL;aAAM;YACH,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;SACjC;QAEO,IAAA,kBAAkB,GAAK,IAAA,gCAAwB,EAAC,IAAI,CAAC,KAAK,CAAC,mBAAzC,CAA0C;QACpE,IAAM,YAAY,GAAU;YACxB,IAAI,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,CAAC;YAE/B,cAAc,EAAE,SAAS;YACzB,SAAS,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,SAAS,mCAAI,MAAM;YACzC,QAAQ,EAAE,MAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,mCAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACzE,WAAW,EAAE,kBAAkB,IAAI,iBAAiB;YACpD,QAAQ,EAAE,YAAY;YACtB,UAAU,EAAE,UAAU;SACzB,CAAC;QAEF,IAAM,YAAY;YACd,YAAY;WACT,IAAA,wBAAgB,EAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OACxC,CAAC;QAEF,OAAO,CACH,oBAAC,eAAI,IACD,KAAK,EAAE,YAAY,EACnB,IAAI,EAAE,IAAI,IAET,OAAO,CACL,CACV,CAAC;IACN,CAAC;IACL,gBAAC;AAAD,CAAC,AA1CD,CAA+B,KAAK,CAAC,aAAa,GA0CjD;AA1CY,8BAAS","sourcesContent":["import * as React from \"react\";\r\nimport ReactPDF, { Text, View } from \"@react-pdf/renderer\";\r\nimport { getDefaultBorderIncludes, transformToArray } from \"./Utils\";\r\nimport {\r\n    Style\r\n} from '@react-pdf/types';\r\n/**\r\n * Whether to include borders or not.\r\n * Depending on the context some toggles will not have any effect.\r\n */\r\nexport interface TableBorder {\r\n    /**\r\n     * Include the top border. Default true.\r\n     */\r\n    includeTopBorder?: boolean;\r\n\r\n    /**\r\n     * Include the right border. Default true.\r\n     */\r\n    includeRightBorder?: boolean;\r\n\r\n    /**\r\n     * Include the bottom border. Default true.\r\n     */\r\n    includeBottomBorder?: boolean;\r\n\r\n    /**\r\n     * Include the left border. Default true.\r\n     */\r\n    includeLeftBorder?: boolean;\r\n}\r\n\r\nexport interface TableCellProps extends TableBorder {\r\n    /**\r\n     * The weighting of a cell based on the flex layout style.\r\n     * This value is between 0..1, if not specified 1 is assumed, this will take up the remaining available space.\r\n     */\r\n    weighting?: number;\r\n\r\n    /**\r\n     * Extra styling to apply. These will override existing style with the same key.\r\n     */\r\n    style?: Style | Style[];\r\n\r\n    /**\r\n     * How to align the text\r\n     */\r\n    textAlign?: \"left\" | \"center\" | \"right\";\r\n\r\n    /**\r\n     * Whether this is a header cell or not. If not defined it will be false.\r\n     */\r\n    isHeader?: boolean;\r\n\r\n    /**\r\n     * The font-size to apply to the cell.\r\n     */\r\n    fontSize?: number | string;\r\n    children?: any;\r\n}\r\n\r\n/**\r\n * This component displays the associated content of it's children.\r\n */\r\nexport class TableCell extends React.PureComponent<TableCellProps> {\r\n    render() {\r\n        let content: any;\r\n\r\n        if (typeof this.props.children === \"string\") {\r\n            content = (\r\n                <Text>{this.props.children}</Text>\r\n            );\r\n        } else if (typeof this.props.children === \"number\") {\r\n            content = (\r\n                <Text>{this.props.children.toString()}</Text>\r\n            );\r\n        } else {\r\n            content = this.props.children;\r\n        }\r\n\r\n        const { includeRightBorder } = getDefaultBorderIncludes(this.props);\r\n        const defaultStyle: Style = {\r\n            flex: this.props.weighting ?? 1,\r\n            // @ts-ignore\r\n            justifyContent: \"stretch\",\r\n            textAlign: this.props.textAlign ?? \"left\",\r\n            fontSize: this.props.fontSize ?? (this.props.isHeader === true ? 14 : 12),\r\n            borderRight: includeRightBorder && \"1pt solid black\",\r\n            wordWrap: \"break-word\",\r\n            whiteSpace: \"pre-wrap\"\r\n        };\r\n\r\n        const mergedStyles: Style[] = [\r\n            defaultStyle,\r\n            ...transformToArray(this.props.style)\r\n        ];\r\n\r\n        return (\r\n            <View\r\n                style={mergedStyles}\r\n                wrap={true}\r\n            >\r\n                {content}\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"]}