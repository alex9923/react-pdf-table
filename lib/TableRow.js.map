{"version":3,"file":"TableRow.js","sourceRoot":"","sources":["../src/TableRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAG/B,gDAAyC;AACzC,iCAAiD;AA2CjD;IAA8B,4BAA4C;IAA1E;;IA+CA,CAAC;IA9CG,yBAAM,GAAN;QAAA,iBA6CC;QA5CG,IAAM,QAAQ,GAAU,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAA,KAAiF,IAAA,gCAAwB,EAAC,IAAI,CAAC,KAAK,CAAC,EAApH,iBAAiB,uBAAA,EAAE,mBAAmB,yBAAA,EAAE,kBAAkB,wBAAA,EAAE,gBAAgB,sBAAwC,CAAC;QAE5H,IAAI,kBAAkB,GAAG,CAAC,CAAC;QAC3B,IAAI,yBAAyB,GAAG,CAAC,CAAC;QAClC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAA4B;YAC1C,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,EAAE;gBACjC,kBAAkB,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;gBACxC,yBAAyB,EAAE,CAAC;aAC/B;QACL,CAAC,CAAC,CAAC;QAEH,IAAM,yBAAyB,GAAG,IAAI,CAAC,IAAI,CAAC,kBAAkB,GAAG,CAAC,QAAQ,CAAC,MAAM,GAAG,yBAAyB,CAAC,CAAC,CAAC;QAEhH,IAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,EAAE,CAAC;QAE5J,OAAO,CACH,oBAAC,eAAI,IAED,KAAK,EAAE;gBACH,YAAY,EAAE,mBAAmB,IAAI,iBAAiB;gBACtD,WAAW,EAAE,kBAAkB,IAAI,iBAAiB;gBACpD,UAAU,EAAE,iBAAiB,IAAI,iBAAiB;gBAClD,SAAS,EAAE,gBAAgB,IAAI,iBAAiB;gBAChD,KAAK,EAAE,MAAM;gBACb,OAAO,EAAE,MAAM;gBACf,aAAa,EAAE,KAAK;gBACpB,cAAc,EAAE,eAAe;gBAC/B,eAAe,EAAE,QAAQ;aAC5B,IAGG,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAE,EAAE,WAAW;;YAAK,OAAA,KAAK,CAAC,YAAY,CAAC,EAAE,EAAE;gBACrD,SAAS,EAAE,MAAA,EAAE,CAAC,KAAK,CAAC,SAAS,mCAAI,yBAAyB;gBAC1D,IAAI,EAAE,KAAI,CAAC,KAAK,CAAC,IAAI;gBACrB,GAAG,EAAE,WAAW;gBAChB,QAAQ,EAAE,KAAI,CAAC,KAAK,CAAC,QAAQ;gBAC7B,SAAS,EAAE,KAAI,CAAC,KAAK,CAAC,SAAS;gBAC/B,iBAAiB,EAAE,WAAW,KAAK,CAAC;gBACpC,kBAAkB,EAAE,WAAW,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;aAC5D,CAAC,CAAA;SAAA,CAAC,CAEJ,CACV,CAAC;IACN,CAAC;IACL,eAAC;AAAD,CAAC,AA/CD,CAA8B,KAAK,CAAC,aAAa,GA+ChD;AA/CY,4BAAQ","sourcesContent":["import * as React from \"react\";\r\nimport {TableBorder, TableCell} from \"./TableCell\";\r\nimport {DataTableCell} from \"./DataTableCell\";\r\nimport {View} from \"@react-pdf/renderer\";\r\nimport {getDefaultBorderIncludes} from \"./Utils\";\r\nimport {TableBodyProps} from \"./TableBody\";\r\n\r\nexport interface TableRowProps extends TableBorder {\r\n    /**\r\n     * The font size as a valid unit defined in react-pdf.\r\n     */\r\n    fontSize?: number | string;\r\n\r\n    /**\r\n     * Whether to align the text. Defaults to left.\r\n     */\r\n    textAlign?: \"left\" | \"center\" | \"right\";\r\n\r\n    /**\r\n     * Any data associated, relevant if the parent is a {@see DataTableCell}.\r\n     */\r\n    data?: any;\r\n\r\n    /**\r\n     * Whether rows have alternating styles\r\n     */\r\n    zebra?: boolean;\r\n\r\n    /**\r\n     * Whether this row is even (true) or odd (false)\r\n     */\r\n    even?: boolean;\r\n\r\n    /**\r\n     * Specify the color of even rows\r\n     */\r\n    evenRowColor?: string;\r\n\r\n    /**\r\n     * Specify the color of odd rows\r\n     */\r\n    oddRowColor?: string;\r\n}\r\n\r\n/**\r\n * This component describes how to display a row.\r\n */\r\nexport class TableRow extends React.PureComponent<Partial<TableBodyProps>> {\r\n    render() {\r\n        const rowCells: any[] = React.Children.toArray(this.props.children);\r\n        const {includeLeftBorder, includeBottomBorder, includeRightBorder, includeTopBorder} = getDefaultBorderIncludes(this.props);\r\n\r\n        let remainingWeighting = 1;\r\n        let numberOfWeightingsDefined = 0;\r\n        rowCells.forEach((i: TableCell | DataTableCell) => {\r\n            if (i.props.weighting !== undefined) {\r\n                remainingWeighting -= i.props.weighting;\r\n                numberOfWeightingsDefined++;\r\n            }\r\n        });\r\n\r\n        const weightingsPerNotSpecified = Math.ceil(remainingWeighting / (rowCells.length - numberOfWeightingsDefined));\r\n\r\n        const rowColor = ((this.props.zebra || this.props.evenRowColor) && this.props.even) ? this.props.evenRowColor || 'lightgray' : this.props.oddRowColor || '';\r\n\r\n        return (\r\n            <View\r\n                // @ts-ignore\r\n                style={{\r\n                    borderBottom: includeBottomBorder && \"1pt solid black\",\r\n                    borderRight: includeRightBorder && \"1pt solid black\",\r\n                    borderLeft: includeLeftBorder && \"1pt solid black\",\r\n                    borderTop: includeTopBorder && \"1pt solid black\",\r\n                    width: \"100%\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\",\r\n                    justifyContent: \"space-between\",\r\n                    backgroundColor: rowColor,\r\n                }}\r\n            >\r\n                {\r\n                    rowCells.map((rc, columnIndex) => React.cloneElement(rc, {\r\n                        weighting: rc.props.weighting ?? weightingsPerNotSpecified,\r\n                        data: this.props.data,\r\n                        key: columnIndex,\r\n                        fontSize: this.props.fontSize,\r\n                        textAlign: this.props.textAlign,\r\n                        includeLeftBorder: columnIndex === 0,\r\n                        includeRightBorder: columnIndex !== (rowCells.length - 1),\r\n                    }))\r\n                }\r\n            </View>\r\n        );\r\n    }\r\n}\r\n"]}